// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using healthTekv2.Models;

namespace healthTekv2.Migrations
{
    [DbContext(typeof(healthtekContext))]
    [Migration("20200430122517_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("healthTekv2.Models.Addresses", b =>
                {
                    b.Property<int>("AddressesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("addresses_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("AddressCreatedTs")
                        .HasColumnName("address_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("AddressModifiedTs")
                        .HasColumnName("address_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPersonsId")
                        .HasColumnName("fk_persons_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("GpsCoordinates")
                        .HasColumnName("gps_coordinates")
                        .HasColumnType("decimal(10,8)");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("AddressesId");

                    b.HasIndex("City")
                        .HasName("idx_city");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_addresses_facilities_idx");

                    b.HasIndex("FkPersonsId")
                        .HasName("fk_addresses_persons_idx");

                    b.HasIndex("State")
                        .HasName("idx_state");

                    b.HasIndex("Country", "Region")
                        .HasName("idx_country");

                    b.HasIndex("Address1", "Address2", "Region")
                        .HasName("idx_address");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("healthTekv2.Models.Appointments", b =>
                {
                    b.Property<int>("AppointmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("appointments_id")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("AppointmentAttachment")
                        .HasColumnName("appointment_attachment")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("AppointmentCreatedTs")
                        .HasColumnName("appointment_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnName("appointment_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("AppointmentEndTime")
                        .HasColumnName("appointment_end_time")
                        .HasColumnType("time");

                    b.Property<DateTime>("AppointmentModifiedTs")
                        .HasColumnName("appointment_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<TimeSpan?>("AppointmentStartTime")
                        .HasColumnName("appointment_start_time")
                        .HasColumnType("time");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnName("appointment_status")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkCommentsId")
                        .HasColumnName("fk_comments_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkContractorsId")
                        .HasColumnName("fk_contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkLocationsId")
                        .HasColumnName("fk_locations_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProceduresId")
                        .HasColumnName("fk_procedures_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkSupervisionsId")
                        .HasColumnName("fk_supervisions_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkUsersId")
                        .HasColumnName("fk_users_id")
                        .HasColumnType("int(11)");

                    b.HasKey("AppointmentsId");

                    b.HasIndex("AppointmentStatus")
                        .HasName("idx_appointment_status");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_appointments_clients_idx");

                    b.HasIndex("FkCommentsId")
                        .HasName("fk_appointments_comments_idx");

                    b.HasIndex("FkContractorsId")
                        .HasName("fk_appointments_contractors_idx");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_appointments_facilities_idx");

                    b.HasIndex("FkLocationsId")
                        .HasName("fk_appointments_locations_idx");

                    b.HasIndex("FkProceduresId")
                        .HasName("fk_appointments_procedures_idx");

                    b.HasIndex("FkSupervisionsId")
                        .HasName("fk_appointments_supervisions_idx");

                    b.HasIndex("FkUsersId")
                        .HasName("fk_appointments_users_idx");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("healthTekv2.Models.Assignments", b =>
                {
                    b.Property<int>("AssignmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("assignments_id")
                        .HasColumnType("int(11)");

                    b.Property<short?>("AssignmentCounter")
                        .HasColumnName("assignment_counter")
                        .HasColumnType("smallint(6)");

                    b.Property<DateTime>("AssignmentCreatedTs")
                        .HasColumnName("assignment_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("AssignmentEffDate")
                        .HasColumnName("assignment_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("AssignmentExpDate")
                        .HasColumnName("assignment_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("AssignmentModifiedTs")
                        .HasColumnName("assignment_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("AssignmentPosition")
                        .HasColumnName("assignment_position")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("AssignmentStatus")
                        .HasColumnName("assignment_status")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkContractorsId")
                        .HasColumnName("fk_contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.HasKey("AssignmentsId");

                    b.HasIndex("AssignmentPosition")
                        .HasName("idx_assignment_position");

                    b.HasIndex("AssignmentStatus")
                        .HasName("idx_assignment_status");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_assignments_clients_idx");

                    b.HasIndex("FkContractorsId")
                        .HasName("fk_assignments_contractors_idx");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_assignments_facilities_idx");

                    b.ToTable("assignments");
                });

            modelBuilder.Entity("healthTekv2.Models.Authorizations", b =>
                {
                    b.Property<int>("AuthorizationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("authorizations_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AuthorizationCode")
                        .IsRequired()
                        .HasColumnName("authorization_code")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("AuthorizationCreatedTs")
                        .HasColumnName("authorization_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("AuthorizationEffDate")
                        .HasColumnName("authorization_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("AuthorizationExpDate")
                        .HasColumnName("authorization_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("AuthorizationModifiedTs")
                        .HasColumnName("authorization_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("AuthorizationNumber")
                        .HasColumnName("authorization_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("AuthorizationStatus")
                        .HasColumnName("authorization_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("AuthorizationType")
                        .HasColumnName("authorization_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPoliciesId")
                        .HasColumnName("fk_policies_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("UnitAmount")
                        .HasColumnName("unit_amount")
                        .HasColumnType("int(11)");

                    b.Property<int?>("UnitsUsed")
                        .HasColumnName("units_used")
                        .HasColumnType("int(11)");

                    b.HasKey("AuthorizationsId");

                    b.HasIndex("AuthorizationCode")
                        .HasName("idx_authorization_code");

                    b.HasIndex("AuthorizationNumber")
                        .HasName("idx_authorization_number");

                    b.HasIndex("AuthorizationStatus")
                        .HasName("idx_authorization_status");

                    b.HasIndex("AuthorizationType")
                        .HasName("idx_authorization_type");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_authorizations_clients_idx");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_authorizations_facilities_idx");

                    b.HasIndex("FkPoliciesId")
                        .HasName("fk_authorizations_policies_idx");

                    b.ToTable("authorizations");
                });

            modelBuilder.Entity("healthTekv2.Models.Behaviors", b =>
                {
                    b.Property<int>("BehaviorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("behaviors_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("Baseline")
                        .HasColumnName("baseline")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime>("BehaviorCreatedTs")
                        .HasColumnName("behavior_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("BehaviorDate")
                        .HasColumnName("behavior_date")
                        .HasColumnType("date");

                    b.Property<string>("BehaviorDescription")
                        .HasColumnName("behavior_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("BehaviorModifiedTs")
                        .HasColumnName("behavior_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("BehaviorName")
                        .IsRequired()
                        .HasColumnName("behavior_name")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProgramsId")
                        .HasColumnName("fk_programs_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("StoNumMonths")
                        .HasColumnName("sto_num_months")
                        .HasColumnType("tinyint(4)");

                    b.HasKey("BehaviorsId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_behaviors_clients_idx");

                    b.HasIndex("FkProgramsId")
                        .HasName("fk_behaviors_programs_idx");

                    b.HasIndex("BehaviorDescription", "BehaviorName")
                        .HasName("idx_behavior_description");

                    b.HasIndex("BehaviorName", "BehaviorDescription")
                        .HasName("idx_behavior_name");

                    b.ToTable("behaviors");

                    b.HasComment("maladaptive or replacement behaviors");
                });

            modelBuilder.Entity("healthTekv2.Models.Claims", b =>
                {
                    b.Property<int>("ClaimsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("claims_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("CheckNumber")
                        .HasColumnName("check_number")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ClaimCreatedTs")
                        .HasColumnName("claim_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("ClaimModifiedTs")
                        .HasColumnName("claim_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ClaimStatus")
                        .IsRequired()
                        .HasColumnName("claim_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("DisputeReason")
                        .HasColumnName("dispute_reason")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkInvoicesId")
                        .HasColumnName("fk_invoices_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("PaidByInsuranceDate")
                        .HasColumnName("paid_by_insurance date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PaidToContractorDate")
                        .HasColumnName("paid_to_contractor_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnName("reconciled_date")
                        .HasColumnType("date");

                    b.HasKey("ClaimsId");

                    b.HasIndex("CheckNumber")
                        .HasName("idx_check_number");

                    b.HasIndex("ClaimStatus")
                        .HasName("idx_claim_status");

                    b.HasIndex("DisputeReason")
                        .HasName("idx_dispute_reason");

                    b.HasIndex("FkInvoicesId")
                        .HasName("fk_claims_invoices_idx");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("healthTekv2.Models.Clients", b =>
                {
                    b.Property<int>("ClientsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clients_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("ClientCreatedTs")
                        .HasColumnName("client_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("ClientModifiedTs")
                        .HasColumnName("client_modified_ts")
                        .HasColumnType("timestamp");

                    b.HasKey("ClientsId");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("healthTekv2.Models.Codes", b =>
                {
                    b.Property<int>("CodesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("codes_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CodeCreatedTs")
                        .HasColumnName("code_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("CodeDescription")
                        .HasColumnName("code_description")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("CodeEffDate")
                        .HasColumnName("code_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CodeExpDate")
                        .HasColumnName("code_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("CodeModifiedTs")
                        .HasColumnName("code_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<decimal?>("CodeRate")
                        .HasColumnName("code_rate")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("CodeRateType")
                        .HasColumnName("code_rate_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("CodeTitle")
                        .HasColumnName("code_title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasColumnName("code_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProceduresId")
                        .HasColumnName("fk_procedures_id")
                        .HasColumnType("int(11)");

                    b.HasKey("CodesId");

                    b.HasIndex("CodeType")
                        .HasName("idx_code_type");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_codes_clients_idx");

                    b.HasIndex("FkProceduresId")
                        .HasName("fk_codes_procedures_idx");

                    b.HasIndex("CodeTitle", "CodeDescription")
                        .HasName("idx_code_title");

                    b.HasIndex("CodeDescription", "CodeTitle", "CodeType")
                        .HasName("idx_code_description");

                    b.ToTable("codes");
                });

            modelBuilder.Entity("healthTekv2.Models.Comments", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comments_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("CommentCreatedTs")
                        .HasColumnName("comment_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("CommentMessage")
                        .HasColumnName("comment_message")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("CommentModifiedTs")
                        .HasColumnName("comment_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("CommentSender")
                        .HasColumnName("comment_sender")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasColumnName("comment_title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("FkUsersId")
                        .HasColumnName("fk_users_id")
                        .HasColumnType("int(11)");

                    b.HasKey("CommentsId");

                    b.HasIndex("CommentSender")
                        .HasName("idx_comment_sender");

                    b.HasIndex("CommentTitle")
                        .HasName("idx_comment_title");

                    b.HasIndex("FkUsersId")
                        .HasName("fk_comments_users_idx");

                    b.HasIndex("CommentMessage", "CommentTitle")
                        .HasName("idx_comment_message");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("healthTekv2.Models.Contractors", b =>
                {
                    b.Property<int>("ContractorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AreaOfResponsibility")
                        .HasColumnName("area_of_responsibility")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ContractorCreatedTs")
                        .HasColumnName("contractor_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("ContractorModifiedTs")
                        .HasColumnName("contractor_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ContractorType")
                        .IsRequired()
                        .HasColumnName("contractor_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<ulong?>("HrReady")
                        .HasColumnName("hr_ready")
                        .HasColumnType("bit(1)");

                    b.Property<ulong?>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("bit(1)");

                    b.Property<decimal?>("PayRate")
                        .HasColumnName("pay_rate")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("ContractorsId");

                    b.HasIndex("AreaOfResponsibility")
                        .HasName("idx_area_of_responsibility");

                    b.HasIndex("ContractorType")
                        .HasName("idx_contractor_type");

                    b.ToTable("contractors");
                });

            modelBuilder.Entity("healthTekv2.Models.ContractorsClients", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnName("clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("ContractorsId")
                        .HasColumnName("contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPersonsId")
                        .HasColumnName("fk_persons_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ClientsId", "ContractorsId")
                        .HasName("PRIMARY");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_contractors_clients_facilities_idx");

                    b.HasIndex("FkPersonsId")
                        .HasName("fk_contractors_clients_persons_idx");

                    b.ToTable("contractors_clients");
                });

            modelBuilder.Entity("healthTekv2.Models.Diagnoses", b =>
                {
                    b.Property<int>("DiagnosesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("diagnoses_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DiagnosisCreatedTs")
                        .HasColumnName("diagnosis_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DiagnosisModifiedTs")
                        .HasColumnName("diagnosis_modified_ts")
                        .HasColumnType("timestamp");

                    b.HasKey("DiagnosesId");

                    b.ToTable("diagnoses");
                });

            modelBuilder.Entity("healthTekv2.Models.ESigns", b =>
                {
                    b.Property<int>("ESignsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("e_signs_id")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("ESignConsent")
                        .HasColumnName("e_sign_consent")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ESignIp")
                        .HasColumnName("e_sign_ip")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<byte[]>("ESignature")
                        .HasColumnName("e_signature")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("ESignsCreatedTs")
                        .HasColumnName("e_signs_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("ESignsModifiedTs")
                        .HasColumnName("e_signs_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<int>("FkPersonsId")
                        .HasColumnName("fk_persons_id")
                        .HasColumnType("int(11)");

                    b.HasKey("ESignsId");

                    b.HasIndex("ESignIp")
                        .HasName("idx_e_sign_ip");

                    b.HasIndex("FkPersonsId")
                        .HasName("fk_e_signs_persons_idx");

                    b.ToTable("e_signs");
                });

            modelBuilder.Entity("healthTekv2.Models.Facilities", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DateOfArrival")
                        .HasColumnName("date_of_arrival")
                        .HasColumnType("date");

                    b.Property<DateTime>("FacilityCreatedTs")
                        .HasColumnName("facility_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("FacilityModifiedTs")
                        .HasColumnName("facility_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnName("medical_record_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ReferredBy")
                        .HasColumnName("referred_by")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ReferredIdentifier")
                        .HasColumnName("referred_identifier")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Supervisor")
                        .HasColumnName("supervisor")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("FacilitiesId");

                    b.HasIndex("MedicalRecordNumber")
                        .HasName("idx_medical_record_number");

                    b.HasIndex("Supervisor")
                        .HasName("idx_supervisor");

                    b.HasIndex("ReferredBy", "ReferredIdentifier")
                        .HasName("idx_referred_by");

                    b.ToTable("facilities");
                });

            modelBuilder.Entity("healthTekv2.Models.Goals", b =>
                {
                    b.Property<int>("GoalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("goals_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkBehaviorsId")
                        .HasColumnName("fk_behaviors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProgramsId")
                        .HasColumnName("fk_programs_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("GoalCreatedTs")
                        .HasColumnName("goal_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("GoalDescription")
                        .HasColumnName("goal_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("GoalModifiedTs")
                        .HasColumnName("goal_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("GoalName")
                        .HasColumnName("goal_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("GoalStatus")
                        .HasColumnName("goal_status")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("GoalType")
                        .IsRequired()
                        .HasColumnName("goal_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("GoalsId");

                    b.HasIndex("FkBehaviorsId")
                        .HasName("fk_goals_behaviors_idx");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_goals_clients_idx");

                    b.HasIndex("FkProgramsId")
                        .HasName("fk_goals_programs_idx");

                    b.HasIndex("GoalName")
                        .HasName("idx_goal_name");

                    b.HasIndex("GoalStatus")
                        .HasName("idx_goal_status");

                    b.HasIndex("GoalType")
                        .HasName("idx_goal_type");

                    b.HasIndex("GoalDescription", "GoalName", "GoalType")
                        .HasName("idx_goal_description");

                    b.ToTable("goals");
                });

            modelBuilder.Entity("healthTekv2.Models.Intakes", b =>
                {
                    b.Property<int>("IntakesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("intakes_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProgramsId")
                        .HasColumnName("fk_programs_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("IntakeCreatedTs")
                        .HasColumnName("intake_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("IntakeEffDate")
                        .HasColumnName("intake_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("IntakeExpDate")
                        .HasColumnName("intake_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("IntakeModifiedTs")
                        .HasColumnName("intake_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("IntakeStatus")
                        .HasColumnName("intake_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("IntakesId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_intakes_clients");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_intakes_facilities");

                    b.HasIndex("FkProgramsId")
                        .HasName("fk_intakes_programs");

                    b.HasIndex("IntakeStatus")
                        .HasName("idx_intake_status");

                    b.ToTable("intakes");
                });

            modelBuilder.Entity("healthTekv2.Models.Invoices", b =>
                {
                    b.Property<int>("InvoicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("invoices_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkFacilitiesId")
                        .HasColumnName("fk_facilities_id")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("Invoice")
                        .HasColumnName("invoice")
                        .HasColumnType("longblob");

                    b.Property<decimal?>("InvoiceAmount")
                        .HasColumnName("invoice_amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("InvoiceCreatedTs")
                        .HasColumnName("invoice_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("InvoiceModifiedTs")
                        .HasColumnName("invoice_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnName("invoice_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("InvoicesId");

                    b.HasIndex("FkFacilitiesId")
                        .HasName("fk_invoices_facilities");

                    b.HasIndex("InvoiceStatus")
                        .HasName("idx_invoice_status");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("healthTekv2.Models.Locations", b =>
                {
                    b.Property<int>("LocationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("locations_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProceduresId")
                        .HasColumnName("fk_procedures_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("LocationCreatedTs")
                        .HasColumnName("location_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("LocationDescription")
                        .HasColumnName("location_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("LocationModifiedTs")
                        .HasColumnName("location_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("LocationName")
                        .HasColumnName("location_name")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("LocationType")
                        .HasColumnName("location_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("LocationsId");

                    b.HasIndex("FkProceduresId")
                        .HasName("fk_locations_procedures_idx");

                    b.HasIndex("LocationType")
                        .HasName("idx_location_type");

                    b.HasIndex("LocationName", "LocationDescription")
                        .HasName("idx_location_name");

                    b.HasIndex("LocationDescription", "LocationName", "LocationType")
                        .HasName("idx_location_description");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("healthTekv2.Models.Medications", b =>
                {
                    b.Property<int>("MedicationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("medications_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPrescriptionsId")
                        .HasColumnName("fk_prescriptions_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("MedicationCreatedTs")
                        .HasColumnName("medication_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("MedicationDescription")
                        .HasColumnName("medication_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("MedicationModifiedTs")
                        .HasColumnName("medication_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("MedicationName")
                        .HasColumnName("medication_name")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("MedicationType")
                        .HasColumnName("medication_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("MedicationsId");

                    b.HasIndex("FkPrescriptionsId")
                        .HasName("fk_medications_prescriptions_idx");

                    b.HasIndex("MedicationName")
                        .HasName("idx_medication_name");

                    b.HasIndex("MedicationType")
                        .HasName("idx_medication_type");

                    b.HasIndex("MedicationDescription", "MedicationName", "MedicationType")
                        .HasName("idx_medication_description");

                    b.ToTable("medications");
                });

            modelBuilder.Entity("healthTekv2.Models.Objectives", b =>
                {
                    b.Property<int>("ObjectivesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("objectives_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkGoalsId")
                        .HasColumnName("fk_goals_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("ObjectiveCreatedTs")
                        .HasColumnName("objective_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ObjectiveDescription")
                        .HasColumnName("objective_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ObjectiveModifiedTs")
                        .HasColumnName("objective_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ObjectiveNumber")
                        .HasColumnName("objective_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ObjectiveStatus")
                        .HasColumnName("objective_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ObjectiveTitle")
                        .HasColumnName("objective_title")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ObjectiveType")
                        .HasColumnName("objective_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("ObjectivesId");

                    b.HasIndex("FkGoalsId")
                        .HasName("fk_objectives_goals");

                    b.HasIndex("ObjectiveTitle")
                        .HasName("idx_objective_title");

                    b.HasIndex("ObjectiveType")
                        .HasName("idx_objective_type");

                    b.HasIndex("ObjectiveDescription", "ObjectiveTitle")
                        .HasName("idx_objective_description");

                    b.ToTable("objectives");
                });

            modelBuilder.Entity("healthTekv2.Models.Papers", b =>
                {
                    b.Property<int>("PapersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("papers_id")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("DigitalPaper")
                        .IsRequired()
                        .HasColumnName("digital_paper")
                        .HasColumnType("longblob");

                    b.Property<short?>("ExpWarningNumDays")
                        .HasColumnName("exp_warning_num_days")
                        .HasColumnType("smallint(6)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkContractorsId")
                        .HasColumnName("fk_contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("IsSorted")
                        .HasColumnName("is_sorted")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime>("PaperCreatedTs")
                        .HasColumnName("paper_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("PaperDescription")
                        .HasColumnName("paper_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("PaperEffDate")
                        .HasColumnName("paper_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PaperExpDate")
                        .HasColumnName("paper_exp_date")
                        .HasColumnType("date");

                    b.Property<string>("PaperIdentifier")
                        .HasColumnName("paper_identifier")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("PaperModifiedTs")
                        .HasColumnName("paper_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("PaperStatus")
                        .HasColumnName("paper_status")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PaperTitle")
                        .IsRequired()
                        .HasColumnName("paper_title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<ulong?>("RequiredItem")
                        .HasColumnName("required_item")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UploadDate")
                        .HasColumnName("upload_date")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("PapersId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_papers_clients_idx");

                    b.HasIndex("FkContractorsId")
                        .HasName("fk_papers_contractors");

                    b.HasIndex("PaperIdentifier")
                        .HasName("idx_paper_identifier");

                    b.HasIndex("PaperStatus")
                        .HasName("idx_paper_status");

                    b.HasIndex("PaperDescription", "PaperTitle", "PaperIdentifier")
                        .HasName("idx_paper_description");

                    b.HasIndex("PaperTitle", "PaperIdentifier", "PaperDescription")
                        .HasName("idx_paper_title");

                    b.ToTable("papers");
                });

            modelBuilder.Entity("healthTekv2.Models.Persons", b =>
                {
                    b.Property<int>("PersonsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("persons_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("Age")
                        .HasColumnName("age")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Ethnicity")
                        .HasColumnName("ethnicity")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("PersonCreatedTs")
                        .HasColumnName("person_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("PersonModifiedTs")
                        .HasColumnName("person_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("Religion")
                        .HasColumnName("religion")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("SocialSecNumber")
                        .HasColumnName("social_sec_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("PersonsId");

                    b.HasIndex("Age")
                        .HasName("idx_age");

                    b.HasIndex("Email")
                        .HasName("idx_email");

                    b.HasIndex("Ethnicity")
                        .HasName("idx_ethnicity");

                    b.HasIndex("FirstName")
                        .HasName("idx_first_name");

                    b.HasIndex("Gender")
                        .HasName("idx_gender");

                    b.HasIndex("Language")
                        .HasName("idx_language");

                    b.HasIndex("LastName")
                        .HasName("idx_last_name");

                    b.HasIndex("MiddleName")
                        .HasName("idx_middle_name");

                    b.HasIndex("Religion")
                        .HasName("idx_religion");

                    b.HasIndex("SocialSecNumber")
                        .HasName("idx_social_sec_number");

                    b.HasIndex("FirstName", "LastName", "MiddleName")
                        .HasName("idx_name");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("healthTekv2.Models.PhoneNumbers", b =>
                {
                    b.Property<int>("PhoneNumbersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_numbers_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPersonsId")
                        .HasColumnName("fk_persons_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("PhoneNumberCreatedTs")
                        .HasColumnName("phone_number_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("PhoneNumberModifiedTs")
                        .HasColumnName("phone_number_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("PhoneType")
                        .HasColumnName("phone_type")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("PhoneNumbersId");

                    b.HasIndex("FkPersonsId")
                        .HasName("fk_phone_numbers_persons");

                    b.HasIndex("PhoneNumber")
                        .HasName("idx_phone_number");

                    b.HasIndex("PhoneType")
                        .HasName("idx_phone_type");

                    b.ToTable("phone_numbers");
                });

            modelBuilder.Entity("healthTekv2.Models.Policies", b =>
                {
                    b.Property<int>("PoliciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("policies_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("PolicyCreatedTs")
                        .HasColumnName("policy_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("PolicyEffDate")
                        .HasColumnName("policy_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PolicyExpDate")
                        .HasColumnName("policy_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("PolicyModifiedTs")
                        .HasColumnName("policy_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("PolicyName")
                        .HasColumnName("policy_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PolicyNumber")
                        .HasColumnName("policy_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("PoliciesId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_policies_clients_idx");

                    b.HasIndex("PolicyName")
                        .HasName("policy_name");

                    b.HasIndex("PolicyNumber")
                        .HasName("policy_number");

                    b.ToTable("policies");
                });

            modelBuilder.Entity("healthTekv2.Models.Prescriptions", b =>
                {
                    b.Property<int>("PrescriptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prescriptions_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("PrescriptionCreatedTs")
                        .HasColumnName("prescription_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("PrescriptionDosage")
                        .HasColumnName("prescription_dosage")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PrescriptionDuration")
                        .HasColumnName("prescription_duration")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PrescriptionFrequency")
                        .HasColumnName("prescription_frequency")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PrescriptionIdentifier")
                        .HasColumnName("prescription_identifier")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("PrescriptionModifiedTs")
                        .HasColumnName("prescription_modified_ts")
                        .HasColumnType("timestamp");

                    b.HasKey("PrescriptionsId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_prescriptions_clients_idx");

                    b.HasIndex("PrescriptionIdentifier")
                        .HasName("idx_prescription_identifier");

                    b.ToTable("prescriptions");
                });

            modelBuilder.Entity("healthTekv2.Models.Procedures", b =>
                {
                    b.Property<int>("ProceduresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("procedures_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("ClientDailyLimit")
                        .HasColumnName("client_daily_limit")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte?>("ContractorDailyLimit")
                        .HasColumnName("contractor_daily_limit")
                        .HasColumnType("tinyint(4)");

                    b.Property<int>("FkAuthorizationsId")
                        .HasColumnName("fk_authorizations_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClaimsId")
                        .HasColumnName("fk_claims_id")
                        .HasColumnType("int(11)");

                    b.Property<decimal?>("PremiumAmount")
                        .HasColumnName("premium_amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("ProcedureCreatedTs")
                        .HasColumnName("procedure_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProcedureDescription")
                        .HasColumnName("procedure_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ProcedureModifiedTs")
                        .HasColumnName("procedure_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProcedureName")
                        .HasColumnName("procedure_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<short?>("ProcedureUnits")
                        .HasColumnName("procedure_units")
                        .HasColumnType("smallint(6)");

                    b.HasKey("ProceduresId");

                    b.HasIndex("FkAuthorizationsId")
                        .HasName("fk_procedures_authorizations");

                    b.HasIndex("FkClaimsId")
                        .HasName("fk_procedures_claims");

                    b.HasIndex("ProcedureName")
                        .HasName("idx_procedure_name");

                    b.HasIndex("ProcedureDescription", "ProcedureName")
                        .HasName("idx_procedure_description");

                    b.ToTable("procedures");

                    b.HasComment("replacing entity services");
                });

            modelBuilder.Entity("healthTekv2.Models.Programs", b =>
                {
                    b.Property<int>("ProgramsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("programs_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkBehaviorsId")
                        .HasColumnName("fk_behaviors_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkGoalsId")
                        .HasColumnName("fk_goals_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkRemediesId")
                        .HasColumnName("fk_remedies_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("ProgramCreatedTs")
                        .HasColumnName("program_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProgramDescription")
                        .HasColumnName("program_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("ProgramEffDate")
                        .HasColumnName("program_eff_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ProgramExpDate")
                        .HasColumnName("program_exp_date")
                        .HasColumnType("date");

                    b.Property<DateTime>("ProgramModifiedTs")
                        .HasColumnName("program_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProgramName")
                        .HasColumnName("program_name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("ProgramsId");

                    b.HasIndex("FkBehaviorsId")
                        .HasName("fk_programs_behaviors");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_programs_clients_idx");

                    b.HasIndex("FkGoalsId")
                        .HasName("fk_programs_goals");

                    b.HasIndex("FkRemediesId")
                        .HasName("fk_programs_remedies_idx");

                    b.HasIndex("ProgramDescription", "ProgramName")
                        .HasName("idx_program_description");

                    b.HasIndex("ProgramName", "ProgramDescription")
                        .HasName("idx_program_name");

                    b.ToTable("programs");
                });

            modelBuilder.Entity("healthTekv2.Models.Providers", b =>
                {
                    b.Property<int>("ProvidersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("providers_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkContractorsId")
                        .HasColumnName("fk_contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProviderCompany")
                        .HasColumnName("provider_company")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ProviderCreatedTs")
                        .HasColumnName("provider_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProviderEin")
                        .HasColumnName("provider_ein")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ProviderIdentifier")
                        .HasColumnName("provider_identifier")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("ProviderModifiedTs")
                        .HasColumnName("provider_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("ProviderNumber")
                        .HasColumnName("provider_number")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ProviderType")
                        .HasColumnName("provider_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ProviderUrl")
                        .HasColumnName("provider_url")
                        .HasColumnType("varchar(2083)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("ProvidersId");

                    b.HasIndex("FkContractorsId")
                        .HasName("fk_providers_contractors");

                    b.HasIndex("ProviderCompany")
                        .HasName("idx_provider_company");

                    b.HasIndex("ProviderEin")
                        .HasName("idx_provider_ein");

                    b.HasIndex("ProviderIdentifier")
                        .HasName("idx_provider_identifier");

                    b.HasIndex("ProviderNumber")
                        .HasName("idx_provider_number");

                    b.HasIndex("ProviderType")
                        .HasName("idx_provider_type");

                    b.ToTable("providers");
                });

            modelBuilder.Entity("healthTekv2.Models.Relationships", b =>
                {
                    b.Property<int>("RelationshipsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("relationships_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkPersonsId")
                        .HasColumnName("fk_persons_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("RelationshipCreatedTs")
                        .HasColumnName("relationship_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("RelationshipModifiedTs")
                        .HasColumnName("relationship_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("RelationshipType")
                        .HasColumnName("relationship_type")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("RelationshipsId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_relationships_clients_idx");

                    b.HasIndex("FkPersonsId")
                        .HasName("fk_relationships_persons");

                    b.HasIndex("RelationshipType")
                        .HasName("idx_relationship_type");

                    b.ToTable("relationships");
                });

            modelBuilder.Entity("healthTekv2.Models.Remedies", b =>
                {
                    b.Property<int>("RemediesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remedies_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkClientsId")
                        .HasColumnName("fk_clients_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProgramsId")
                        .HasColumnName("fk_programs_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("RemedyCreatedTs")
                        .HasColumnName("remedy_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("RemedyDescription")
                        .HasColumnName("remedy_description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("RemedyModifiedTs")
                        .HasColumnName("remedy_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("RemedyName")
                        .HasColumnName("remedy_name")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("RemediesId");

                    b.HasIndex("FkClientsId")
                        .HasName("fk_remedies_clients_idx");

                    b.HasIndex("FkProgramsId")
                        .HasName("fk_remedies_programs");

                    b.HasIndex("RemedyDescription", "RemedyName")
                        .HasName("idx_remedy_description");

                    b.HasIndex("RemedyName", "RemedyDescription")
                        .HasName("idx_remedy_name");

                    b.ToTable("remedies");

                    b.HasComment("replacing interventions and reinforcers tables");
                });

            modelBuilder.Entity("healthTekv2.Models.Supervisions", b =>
                {
                    b.Property<int>("SupervisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("supervisions_id")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("ClientPresent")
                        .HasColumnName("client_present")
                        .HasColumnType("bit(1)");

                    b.Property<int>("FkCommentsId")
                        .HasColumnName("fk_comments_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkProvidersId")
                        .HasColumnName("fk_providers_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("SupervisionCharacteristic")
                        .HasColumnName("supervision_characteristic")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("SupervisionCreatedTs")
                        .HasColumnName("supervision_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("SupervisionDate")
                        .HasColumnName("supervision_date")
                        .HasColumnType("date");

                    b.Property<string>("SupervisionMode")
                        .HasColumnName("supervision_mode")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("SupervisionModifiedTs")
                        .HasColumnName("supervision_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("SupervisionType")
                        .HasColumnName("supervision_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("SupervisionsId");

                    b.HasIndex("FkCommentsId")
                        .HasName("fk_supervisions_comments");

                    b.HasIndex("FkProvidersId")
                        .HasName("fk_supervisions_providers");

                    b.HasIndex("SupervisionMode")
                        .HasName("idx_supervision_mode");

                    b.HasIndex("SupervisionType")
                        .HasName("idx_supervision_type");

                    b.HasIndex("SupervisionCharacteristic", "SupervisionType")
                        .HasName("idx_supervision_characteristic");

                    b.ToTable("supervisions");
                });

            modelBuilder.Entity("healthTekv2.Models.Tasks", b =>
                {
                    b.Property<int>("TasksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tasks_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnName("due_date")
                        .HasColumnType("date");

                    b.Property<int>("FkCommentsId")
                        .HasColumnName("fk_comments_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkUsersId")
                        .HasColumnName("fk_users_id")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("IsCleared")
                        .HasColumnName("is_cleared")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ScheduledBy")
                        .IsRequired()
                        .HasColumnName("scheduled_by")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<byte[]>("TaskAttachment")
                        .HasColumnName("task_attachment")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("TaskCreatedTs")
                        .HasColumnName("task_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("TaskModifiedTs")
                        .HasColumnName("task_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("TaskRegarding")
                        .HasColumnName("task_regarding")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("TaskStatus")
                        .HasColumnName("task_status")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("TaskType")
                        .HasColumnName("task_type")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("TasksId");

                    b.HasIndex("FkCommentsId")
                        .HasName("fk_tasks_comments");

                    b.HasIndex("FkUsersId")
                        .HasName("fk_tasks_users_idx");

                    b.HasIndex("ScheduledBy")
                        .HasName("idx_scheduled_by");

                    b.HasIndex("TaskStatus")
                        .HasName("idx_task_status");

                    b.HasIndex("TaskType")
                        .HasName("idx_task_type");

                    b.HasIndex("TaskRegarding", "TaskType")
                        .HasName("idx_task_regarding");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("healthTekv2.Models.Trials", b =>
                {
                    b.Property<int>("TrialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trials_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkBehaviorsId")
                        .HasColumnName("fk_behaviors_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("SuccessfulTrials")
                        .HasColumnName("successful_trials")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte?>("TotalTrials")
                        .HasColumnName("total_trials")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime>("TrialCreatedTs")
                        .HasColumnName("trial_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("TrialModifiedTs")
                        .HasColumnName("trial_modified_ts")
                        .HasColumnType("timestamp");

                    b.HasKey("TrialsId");

                    b.HasIndex("FkBehaviorsId")
                        .HasName("fk_trials_behaviors");

                    b.ToTable("trials");
                });

            modelBuilder.Entity("healthTekv2.Models.Users", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("users_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkCommentsId")
                        .HasColumnName("fk_comments_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("FkContractorsId")
                        .HasColumnName("fk_contractors_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PasswordConfirm")
                        .IsRequired()
                        .HasColumnName("password_confirm")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime>("UserCreatedTs")
                        .HasColumnName("user_created_ts")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("UserModifiedTs")
                        .HasColumnName("user_modified_ts")
                        .HasColumnType("timestamp");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(75)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("UsersId");

                    b.HasIndex("FkCommentsId")
                        .HasName("fk_users_comments");

                    b.HasIndex("FkContractorsId")
                        .HasName("fk_users_contractors");

                    b.HasIndex("Username")
                        .HasName("idx_username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("healthTekv2.Models.Addresses", b =>
                {
                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Addresses")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_addresses_facilities")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Persons", "FkPersons")
                        .WithMany("Addresses")
                        .HasForeignKey("FkPersonsId")
                        .HasConstraintName("fk_addresses_persons")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Appointments", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Appointments")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_appointments_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Comments", "FkComments")
                        .WithMany("Appointments")
                        .HasForeignKey("FkCommentsId")
                        .HasConstraintName("fk_appointments_comments")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Contractors", "FkContractors")
                        .WithMany("Appointments")
                        .HasForeignKey("FkContractorsId")
                        .HasConstraintName("fk_appointments_contractors")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Appointments")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_appointments_facilities")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Locations", "FkLocations")
                        .WithMany("Appointments")
                        .HasForeignKey("FkLocationsId")
                        .HasConstraintName("fk_appointments_locations")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Procedures", "FkProcedures")
                        .WithMany("Appointments")
                        .HasForeignKey("FkProceduresId")
                        .HasConstraintName("fk_appointments_procedures")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Supervisions", "FkSupervisions")
                        .WithMany("Appointments")
                        .HasForeignKey("FkSupervisionsId")
                        .HasConstraintName("fk_appointments_supervisions")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Users", "FkUsers")
                        .WithMany("Appointments")
                        .HasForeignKey("FkUsersId")
                        .HasConstraintName("fk_appointments_users")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Assignments", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Assignments")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_assignments_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Contractors", "FkContractors")
                        .WithMany("Assignments")
                        .HasForeignKey("FkContractorsId")
                        .HasConstraintName("fk_assignments_contractors")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Assignments")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_assignments_facilities")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Authorizations", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Authorizations")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_authorizations_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Authorizations")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_authorizations_facilities")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Policies", "FkPolicies")
                        .WithMany("Authorizations")
                        .HasForeignKey("FkPoliciesId")
                        .HasConstraintName("fk_authorizations_policies")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Behaviors", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Behaviors")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_behaviors_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Programs", "FkPrograms")
                        .WithMany("Behaviors")
                        .HasForeignKey("FkProgramsId")
                        .HasConstraintName("fk_behaviors_programs")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Claims", b =>
                {
                    b.HasOne("healthTekv2.Models.Invoices", "FkInvoices")
                        .WithMany("Claims")
                        .HasForeignKey("FkInvoicesId")
                        .HasConstraintName("fk_claims_invoices")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Codes", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Codes")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_codes_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Procedures", "FkProcedures")
                        .WithMany("Codes")
                        .HasForeignKey("FkProceduresId")
                        .HasConstraintName("fk_codes_procedures")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Comments", b =>
                {
                    b.HasOne("healthTekv2.Models.Users", "FkUsers")
                        .WithMany("Comments")
                        .HasForeignKey("FkUsersId")
                        .HasConstraintName("fk_comments_users")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.ContractorsClients", b =>
                {
                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("ContractorsClients")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_contractors_clients_facilities")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Persons", "FkPersons")
                        .WithMany("ContractorsClients")
                        .HasForeignKey("FkPersonsId")
                        .HasConstraintName("fk_contractors_clients_persons")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.ESigns", b =>
                {
                    b.HasOne("healthTekv2.Models.Persons", "FkPersons")
                        .WithMany("ESigns")
                        .HasForeignKey("FkPersonsId")
                        .HasConstraintName("fk_e_signs_persons")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Goals", b =>
                {
                    b.HasOne("healthTekv2.Models.Behaviors", "FkBehaviors")
                        .WithMany("Goals")
                        .HasForeignKey("FkBehaviorsId")
                        .HasConstraintName("fk_goals_behaviors")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Goals")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_goals_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Programs", "FkPrograms")
                        .WithMany("Goals")
                        .HasForeignKey("FkProgramsId")
                        .HasConstraintName("fk_goals_programs")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Intakes", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Intakes")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_intakes_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Intakes")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_intakes_facilities")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Programs", "FkPrograms")
                        .WithMany("Intakes")
                        .HasForeignKey("FkProgramsId")
                        .HasConstraintName("fk_intakes_programs")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Invoices", b =>
                {
                    b.HasOne("healthTekv2.Models.Facilities", "FkFacilities")
                        .WithMany("Invoices")
                        .HasForeignKey("FkFacilitiesId")
                        .HasConstraintName("fk_invoices_facilities")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Locations", b =>
                {
                    b.HasOne("healthTekv2.Models.Procedures", "FkProcedures")
                        .WithMany("Locations")
                        .HasForeignKey("FkProceduresId")
                        .HasConstraintName("fk_locations_procedures")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Medications", b =>
                {
                    b.HasOne("healthTekv2.Models.Prescriptions", "FkPrescriptions")
                        .WithMany("Medications")
                        .HasForeignKey("FkPrescriptionsId")
                        .HasConstraintName("fk_medications_prescriptions")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Objectives", b =>
                {
                    b.HasOne("healthTekv2.Models.Goals", "FkGoals")
                        .WithMany("Objectives")
                        .HasForeignKey("FkGoalsId")
                        .HasConstraintName("fk_objectives_goals")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Papers", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Papers")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_papers_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Contractors", "FkContractors")
                        .WithMany("Papers")
                        .HasForeignKey("FkContractorsId")
                        .HasConstraintName("fk_papers_contractors")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.PhoneNumbers", b =>
                {
                    b.HasOne("healthTekv2.Models.Persons", "FkPersons")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("FkPersonsId")
                        .HasConstraintName("fk_phone_numbers_persons")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Policies", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Policies")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_policies_clients")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Prescriptions", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Prescriptions")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_prescriptions_clients")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Procedures", b =>
                {
                    b.HasOne("healthTekv2.Models.Authorizations", "FkAuthorizations")
                        .WithMany("Procedures")
                        .HasForeignKey("FkAuthorizationsId")
                        .HasConstraintName("fk_procedures_authorizations")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Claims", "FkClaims")
                        .WithMany("Procedures")
                        .HasForeignKey("FkClaimsId")
                        .HasConstraintName("fk_procedures_claims")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Programs", b =>
                {
                    b.HasOne("healthTekv2.Models.Behaviors", "FkBehaviors")
                        .WithMany("Programs")
                        .HasForeignKey("FkBehaviorsId")
                        .HasConstraintName("fk_programs_behaviors")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Programs")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_programs_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Goals", "FkGoals")
                        .WithMany("Programs")
                        .HasForeignKey("FkGoalsId")
                        .HasConstraintName("fk_programs_goals")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Remedies", "FkRemedies")
                        .WithMany("Programs")
                        .HasForeignKey("FkRemediesId")
                        .HasConstraintName("fk_programs_remedies")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Providers", b =>
                {
                    b.HasOne("healthTekv2.Models.Contractors", "FkContractors")
                        .WithMany("Providers")
                        .HasForeignKey("FkContractorsId")
                        .HasConstraintName("fk_providers_contractors")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Relationships", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Relationships")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_relationships_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Persons", "FkPersons")
                        .WithMany("Relationships")
                        .HasForeignKey("FkPersonsId")
                        .HasConstraintName("fk_relationships_persons")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Remedies", b =>
                {
                    b.HasOne("healthTekv2.Models.Clients", "FkClients")
                        .WithMany("Remedies")
                        .HasForeignKey("FkClientsId")
                        .HasConstraintName("fk_remedies_clients")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Programs", "FkPrograms")
                        .WithMany("Remedies")
                        .HasForeignKey("FkProgramsId")
                        .HasConstraintName("fk_remedies_programs")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Supervisions", b =>
                {
                    b.HasOne("healthTekv2.Models.Comments", "FkComments")
                        .WithMany("Supervisions")
                        .HasForeignKey("FkCommentsId")
                        .HasConstraintName("fk_supervisions_comments")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Providers", "FkProviders")
                        .WithMany("Supervisions")
                        .HasForeignKey("FkProvidersId")
                        .HasConstraintName("fk_supervisions_providers")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Tasks", b =>
                {
                    b.HasOne("healthTekv2.Models.Comments", "FkComments")
                        .WithMany("Tasks")
                        .HasForeignKey("FkCommentsId")
                        .HasConstraintName("fk_tasks_comments")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Users", "FkUsers")
                        .WithMany("Tasks")
                        .HasForeignKey("FkUsersId")
                        .HasConstraintName("fk_tasks_users")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Trials", b =>
                {
                    b.HasOne("healthTekv2.Models.Behaviors", "FkBehaviors")
                        .WithMany("Trials")
                        .HasForeignKey("FkBehaviorsId")
                        .HasConstraintName("fk_trials_behaviors")
                        .IsRequired();
                });

            modelBuilder.Entity("healthTekv2.Models.Users", b =>
                {
                    b.HasOne("healthTekv2.Models.Comments", "FkComments")
                        .WithMany("Users")
                        .HasForeignKey("FkCommentsId")
                        .HasConstraintName("fk_users_comments")
                        .IsRequired();

                    b.HasOne("healthTekv2.Models.Contractors", "FkContractors")
                        .WithMany("Users")
                        .HasForeignKey("FkContractorsId")
                        .HasConstraintName("fk_users_contractors")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
